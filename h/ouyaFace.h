/*
 * (C) 2001-2012 Marmalade. All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Marmalade.
 *
 * This file consists of source code released by Marmalade under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_OUYAFACE_H
#define S3E_EXT_OUYAFACE_H

#include <s3eTypes.h>

/*
 * @brief The type of the controller events.
 */
enum  OuyaControllerEvent
{
  OUYA_CONTROLLER_AXIS_EVENT, // analog stick action, including triggers
  OUYA_CONTROLLER_BUTTON_EVENT, // buttons
  kNumOuyaControllerEvents
};

/*
 * @brief  Controllers axis id values.
 */
enum  OuyaControllerAxisId
{
  OUYA_CONTROLLER_AXIS_LEFT_X = 0,
  OUYA_CONTROLLER_AXIS_LEFT_Y = 1,
  OUYA_CONTROLLER_AXIS_RIGHT_X = 11,
  OUYA_CONTROLLER_AXIS_RIGHT_Y = 14,
  OUYA_CONTROLLER_AXIS_LEFT_TRIGGER = 17,
  OUYA_CONTROLLER_AXIS_RIGHT_TRIGGER = 18,
};

/*
 * @brief Controller button id values.
 */
enum  OuyaControllerButtonId
{
  OUYA_CONTROLLER_BUTTON_DPAD_UP = 19,
  OUYA_CONTROLLER_BUTTON_DPAD_DOWN = 20,
  OUYA_CONTROLLER_BUTTON_DPAD_LEFT = 21,
  OUYA_CONTROLLER_BUTTON_DPAD_RIGHT = 22,
  OUYA_CONTROLLER_BUTTON_MENU = 82,
  OUYA_CONTROLLER_BUTTON_O = 96,
  OUYA_CONTROLLER_BUTTON_U = 99,
  OUYA_CONTROLLER_BUTTON_Y = 100,
  OUYA_CONTROLLER_BUTTON_A = 97,
  OUYA_CONTROLLER_BUTTON_L1 = 102,
  OUYA_CONTROLLER_BUTTON_R1 = 103,
  OUYA_CONTROLLER_BUTTON_L2 = 104,
  OUYA_CONTROLLER_BUTTON_R2 = 105,
  OUYA_CONTROLLER_BUTTON_L3 = 106,
  OUYA_CONTROLLER_BUTTON_R3 = 107,
  kNumControllerButtons
};

/*
 * @brief System data of an OUYA_CONTROLLER_MOTION_EVENT
 */
struct  OuyaControllerAxisEvent
{
  uint32  controllerId;
  uint32  playerId;
  uint32  axisId;
  float   axisValue;
};

/*
 * @brief System data of an OUYA_CONTROLLER_BUTTON_EVENT
 */
struct  OuyaControllerButtonEvent
{
  uint32  controllerId;
  uint32  playerId;
  uint32  buttonId;
  uint32  isPressed;
};

/*
  @brief  Error codes returned from OuyaFacadeRequest* callbacks.
  OUYA_FACADE_NO_ERROR is success, 1-999 are HTTP status codes, >999
  are internal error codes.  
*/
enum  OuyaFacadeError
{
  OUYA_FACADE_ERROR_CANCELLED = -1,
  OUYA_FACADE_ERROR_NONE = 0,
};

/*
 * @brief System data of the callback for OuyaFacadeRequestGamerUUID.
 */
struct  OuyaFacadeGamerUUIDResult
{
  int32       error;
  const char*	pGamerUUID;
};

struct  OuyaFacadeReceipt
{
  const char* pProductId;
  int32       priceInCents;
  uint64      purchaseDate;
  uint64      generatedDate;
};

/*
 * @brief System data of the callback for OuyaFacadeRequestReceipts.
 */
struct  OuyaFacadeReceiptsResult
{
  int32                     error;
  int32                     numReceipts;
  const OuyaFacadeReceipt*  parReceipt;
};

struct  OuyaFacadeProduct
{
  const char* pProductId;
  const char* pName;
  int32       priceInCents;
};

/*
 * @brief System data of the callback for OuyaFacadeRequestProductList.
 */
struct  OuyaFacadeProductListResult
{
  int32                     error;
  int32                     numProducts;
  const OuyaFacadeProduct*  parProduct;
};

/*
 * @brief System data of the callback for OuyaFacadeRequestPurchase.
 */
struct	OuyaFacadePurchaseResult
{
  int32             error;
  OuyaFacadeProduct productPurchased;
};
// \cond HIDDEN_DEFINES
S3E_BEGIN_C_DECL
// \endcond

/**
 * Returns S3E_TRUE if the ouyaFace extension is available.
 */
s3eBool ouyaFaceAvailable();

/*
 * @brief Initialises  the OuyaFacade.
 */
void ouyaInit(const char* pDeveloperId, const char* pApplicationKey);

/*
 * @brief Terminates the OuyaFacade.
 */
void ouyaTerm();

/*
 * @brief Tells you whether OuyaFacade was successfully initialised.
 */
int ouyaFacadeIsInitialised();

/*
 * @brief Tells you whether the app is running on OUYA hardware.
 */
int ouyaFacadeIsRunningOnOUYAHardware();

/*
 * @brief Attempts to retrieve and return a @a pValue stored under @a pKey.
 */
void ouyaFacadeGetGameData(const char * pKey, char * pBuffer, int bufferSize);

/*
 * @brief Stores a @a pValue string under @a pKey. How long it will be persisted will depend on its size and usage.
 */
void ouyaFacadePutGameData(const char * pKey, const char * pValue);

/*
 * @brief Sets OuyaFacade to test mode for the intents of purposes of
          purchases and purchase history.
 */
void ouyaFacadeSetTestMode();

/*
 * @brief Requests the UUID for the current account. The system data parameter
 *        of the callback will point to an OuyaFacadeGamerUUIDResult object.
 */
s3eResult ouyaFacadeRequestGamerUUID(s3eCallback pCallback, void * pUserData);

/*
 * @brief Requests the receipts for the current account and app. The system
 *        data parameter of the callback will point to an
 *        OuyaFacadeReceiptsResult object.
 */
s3eResult ouyaFacadeRequestReceipts(s3eCallback pCallback, void * pUserData);

/*
 * @brief Requests information for the given list of purchasables. The system
 *        data parameter of the callback will point to an
 *        OuyaFacadeProductListResult object.
 */
s3eResult ouyaFacadeRequestProductList(const char ** parPurchasable,  int numPurchasables, s3eCallback pCallback, void * pUserData);

/*
 * @brief Requests the purchase of the the given purchasable. The system data
 *        parameter of the callback will point to an OuyaFacadePurchaseResult
 *        object.
 */
s3eResult ouyaFacadeRequestPurchase(const char * pPurchasable, s3eCallback pCallback, void * pUserData);

/*
 * @brief Registers a controller event handler for the given event type.
 *        The system data parameter of the callback will point to objects type
 *        corresponding the event type.
 */
s3eResult ouyaControllerRegister(OuyaControllerEvent type, s3eCallback pCallback, void * pUserData);

/*
 * @brief Unregisters the given controller event handler for the given event
 *        type.
 */
s3eResult ouyaControllerUnRegister(OuyaControllerEvent type, s3eCallback pCallback);

/*
 * @brief Gives you the state of the given @a button on the given
 *        @a controller.
 */
int ouyaControllerGetButtonState(uint32 controller, uint32 button);

/*
 * @brief Gives you the state of the given @axis on the given @a controller.
 */
float ouyaControllerGetAxis(uint32 controller, uint32 axis);

S3E_END_C_DECL

#endif /* !S3E_EXT_OUYAFACE_H */
